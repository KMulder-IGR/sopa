#!/usr/bin/env bash
# This script was generated by bashly 1.0.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
sopa_igr_usage() {
  if [[ -n $long_usage ]]; then
    printf "sopa-igr\n"
    echo

    printf "  CLI for preprocessing MERFISH data @GustaveRoussy\n  Author: Quentin Blampey (CentraleSup√©lec x IGR x PRISM)\n"
    echo

  else
    printf "sopa-igr - CLI for preprocessing MERFISH data @GustaveRoussy\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  sopa-igr COMMAND\n"
  printf "  sopa-igr [COMMAND] --help | -h\n"
  printf "  sopa-igr --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Runs the pipeline on one region (prompts the user for inputs)\n" "$(green "run")   "
  printf "  %s   Shows the pipeline status for all regions\n" "$(green "status")"
  printf "  %s   Shows a pipeline log file (by default, shows the last one) or a job output\n" "$(green "log")   "
  printf "  %s   Pulls changes from the sopa repository\n" "$(green "update")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
sopa_igr_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "sopa-igr run - Runs the pipeline on one region (prompts the user for inputs)\n"
    echo

  else
    printf "sopa-igr run - Runs the pipeline on one region (prompts the user for inputs)\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  sopa-igr run\n"
  printf "  sopa-igr run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
sopa_igr_status_usage() {
  if [[ -n $long_usage ]]; then
    printf "sopa-igr status - Shows the pipeline status for all regions\n"
    echo

  else
    printf "sopa-igr status - Shows the pipeline status for all regions\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  sopa-igr status [TISSUE]\n"
  printf "  sopa-igr status --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "TISSUE")"
    printf "    Name of the tissue to consider (e.g., breast/thyroid)\n"
    echo

  fi
}

# :command.usage
sopa_igr_log_usage() {
  if [[ -n $long_usage ]]; then
    printf "sopa-igr log - Shows a pipeline log file (by default, shows the last one) or a job output\n"
    echo

  else
    printf "sopa-igr log - Shows a pipeline log file (by default, shows the last one) or a job output\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  sopa-igr log [FILE]\n"
  printf "  sopa-igr log --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "FILE")"
    printf "    Name of the log file to consider (or index, sorted by inverse creation time)\n"
    echo

  fi
}

# :command.usage
sopa_igr_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "sopa-igr update - Pulls changes from the sopa repository\n"
    echo

  else
    printf "sopa-igr update - Pulls changes from the sopa repository\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  sopa-igr update\n"
  printf "  sopa-igr update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# :command.command_functions
# :command.function
sopa_igr_run_command() {
  # src/run_command.sh
  screen sh -c "\
      module load anaconda3 &&\
      source activate snakemake &&\
      cd /mnt/beegfs/merfish/sopa/workflow &&\
      python /mnt/beegfs/merfish/sopa/cli/scripts/prompt.py &&\
      echo 'Exiting screen in 60s...(or run ctrl+C to exit now)' &&\
      sleep 60"
}

# :command.function
sopa_igr_status_command() {
  # src/status_command.sh
  TISSUE=${args[tissue]}

  module load anaconda3
  python /mnt/beegfs/merfish/sopa/cli/scripts/status.py -t $TISSUE
}

# :command.function
sopa_igr_log_command() {
  # src/log_command.sh
  FILE="${args[file]:-1}"

  if [ ${#FILE} -eq 7 ]; then
      cat /mnt/beegfs/merfish/sopa/workflow/logs/$FILE
      echo
      echo "[Job log file $FILE]"
      echo
  else
      re='^[0-9]+$'

      if [[ $FILE =~ $re ]] ; then
          FILE="$(ls -rt /mnt/beegfs/merfish/sopa/workflow/.snakemake/log | tail -n${FILE} | head -1)"
      fi

      FULL_PATH=/mnt/beegfs/merfish/sopa/workflow/.snakemake/log/$FILE
      OWNER="$(stat -c '%U' $FULL_PATH)"

      cat $FULL_PATH
      echo
      echo "[Snakemake log file $FILE - executed by $OWNER]"
  fi

}

# :command.function
sopa_igr_update_command() {
  # src/update_command.sh
  git -C /mnt/beegfs/merfish/sopa pull origin master
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        sopa_igr_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    run)
      action="run"
      shift
      sopa_igr_run_parse_requirements "$@"
      shift $#
      ;;

    status)
      action="status"
      shift
      sopa_igr_status_parse_requirements "$@"
      shift $#
      ;;

    log)
      action="log"
      shift
      sopa_igr_log_parse_requirements "$@"
      shift $#
      ;;

    update)
      action="update"
      shift
      sopa_igr_update_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      sopa_igr_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
sopa_igr_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        sopa_igr_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
sopa_igr_status_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        sopa_igr_status_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="status"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['tissue']+x} ]]; then

          args['tissue']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
sopa_igr_log_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        sopa_igr_log_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="log"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['file']+x} ]]; then

          args['file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
sopa_igr_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        sopa_igr_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "run") sopa_igr_run_command ;;
    "status") sopa_igr_status_command ;;
    "log") sopa_igr_log_command ;;
    "update") sopa_igr_update_command ;;
  esac
}

initialize
run "$@"
